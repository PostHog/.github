# This workflow manages pull requests in the Feature Flags Project board.
# When a member of the team specified by TEAM_SLUG is added as a reviewer to a PR, the workflow will:
# - Add the PR to the project board
# - Set the status of the PR to 'In Review'
# When a PR is converted to draft mode, the workflow will:
# - Set the status of the PR to 'In Progress'
# When a PR is marked ready for review, the workflow will:
# - Set the status of the PR to 'In Review'
#
# Required permissions:
# - POSTHOG_PROJECT_BOT_TOKEN with:
#   - repo scope (for PR operations)
#   - project scope (for project board operations)
#   - read:org scope (for team membership checks)

name: Add PR to Feature Flags Project

# The IDs below require using the GraphQL API to get them.
env:
    PROJECT_V2_ID: PVT_kwDOA5iQ-M4AroCF             # Feature Flags Project
    STATUS_FIELD_ID: PVTSSF_lADOA5iQ-M4AroCFzgirkuw # Status Field for Feature Flags Project
    IN_REVIEW_OPTION_ID: 8d24d43c                   # Status: In Review
    IN_PROGRESS_OPTION_ID: f75ad846                 # Status: In Progress
    ORG_NAME: PostHog
    TEAM_SLUG: team-feature-flags

on:
    workflow_call:
        # 'workflow_call' means the workflow is called from another workflow via the uses: keyword
        # But the github.event_name is the original event name (e.g. pull_request) because this workflow 
        # lives in the special .github repository (It's a not well-documented special case).
        inputs:
            pr_number:
                description: 'The number of the pull request'
                required: true
                type: number
            pr_node_id:
                description: 'The node ID of the pull request'
                required: true
                type: string
            is_draft:
                description: 'Whether the pull request is in draft mode'
                required: true
                type: boolean
    workflow_dispatch:
        inputs:
            pr_number:
                description: 'The number of the pull request'
                required: true
                type: number
            repository:
                description: 'The repository name (e.g. todo-app)'
                required: true
                type: string

jobs:
    add-to-project-board:
        runs-on: ubuntu-latest
        # When the workflow is called via `workflow_call` (aka from another workflow via the uses: keyword), from another repository,
        # the github.event_name is supposed to be `workflow_call`, but because this workflow lives in the special `.github` repository,
        # it preserves the original event name (e.g. pull_request).
        # This is a not well-documented special case.
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
        steps:
            - name: Get PR Node ID for workflow_dispatch
              id: get-pr
              if: github.event_name == 'workflow_dispatch'
              uses: actions/github-script@v6
              with:
                  github-token: ${{ secrets.POSTHOG_PROJECT_BOT_TOKEN }}
                  script: |
                      const prNumber = ${{ github.event.inputs.pr_number }};
                      const repo = '${{ github.event.inputs.repository }}';
                      const owner = process.env.ORG_NAME;
                      
                      const { data: pr } = await github.rest.pulls.get({
                          owner,
                          repo,
                          pull_number: prNumber
                      });
                      
                      // Store the full PR data as a JSON string in the output
                      core.setOutput('pr_data', JSON.stringify(pr));
                      core.setOutput('node_id', pr.node_id);
                      core.setOutput('is_draft', pr.draft.toString());

            - name: Determine PR status and desired project status
              id: check
              uses: actions/github-script@v6
              env:
                  IN_REVIEW_OPTION_ID: '${{ env.IN_REVIEW_OPTION_ID }}'
                  IN_PROGRESS_OPTION_ID: '${{ env.IN_PROGRESS_OPTION_ID }}'
                  ORG_NAME: '${{ env.ORG_NAME }}'
                  TEAM_SLUG: '${{ env.TEAM_SLUG }}'
                  PR_NODE_ID: ${{ inputs.pr_node_id }}
                  IS_DRAFT: ${{ inputs.is_draft }}
                  PR_NUMBER: ${{ inputs.pr_number }}
              with:
                  github-token: ${{ secrets.POSTHOG_PROJECT_BOT_TOKEN }}
                  script: |
                      // Debug logging
                      core.info('Event type: ' + context.eventName);
                      
                      let pr, isDraft, nodeId;
                      
                      // Convert is_draft to boolean once at the start
                      if (context.eventName === 'pull_request') {
                          // Handle direct PR event
                          pr = context.payload.pull_request;
                          isDraft = pr.draft;  // pr.draft is already a boolean from the GitHub API
                          nodeId = pr.node_id;
                      } else if (context.eventName === 'workflow_dispatch') {
                          // Handle manual dispatch
                          const prData = JSON.parse('${{ steps.get-pr.outputs.pr_data }}');
                          pr = prData;
                          nodeId = '${{ steps.get-pr.outputs.node_id }}';
                          isDraft = '${{ steps.get-pr.outputs.is_draft }}' === 'true';
                      } else if (context.eventName === 'workflow_call') {
                          // Handle workflow call
                          const query = `
                            query($nodeId: ID!) {
                              node(id: $nodeId) {
                                ... on PullRequest {
                                  id
                                  number
                                  isDraft
                                  repository {
                                    nameWithOwner
                                  }
                                  requestedReviewers(first: 100) {
                                    nodes {
                                      ... on User {
                                        login
                                      }
                                      ... on Team {
                                        slug
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          `;
                          
                          const nodeId = process.env.PR_NODE_ID;
                          const result = await github.graphql(query, { nodeId });
                          const prData = result.node;
                          
                          if (!prData) {
                              throw new Error(`Could not find PR with node ID: ${nodeId}`);
                          }
                          
                          // Extract repository name from nameWithOwner (format: "owner/repo")
                          const [owner, repo] = prData.repository.nameWithOwner.split('/');
                          
                          // Use the PR data directly from GraphQL
                          pr = {
                              number: prData.number,
                              draft: prData.isDraft,
                              node_id: nodeId,
                              base: { repo: { name: repo } },
                              requested_reviewers: prData.requestedReviewers.nodes.filter(r => 'login' in r),
                              requested_teams: prData.requestedReviewers.nodes.filter(r => 'slug' in r)
                          };
                          isDraft = process.env.IS_DRAFT === 'true';
                      } else {
                          throw new Error(`Unsupported event type: ${context.eventName}`);
                      }
                      
                      const owner = process.env.ORG_NAME;
                      const repo = pr.base.repo.name;
                      const prNumber = pr.number;
                      const teamSlug = process.env.TEAM_SLUG;

                      core.info(`Evaluating PR #${prNumber} (draft: ${isDraft})`);

                      let statusOptionId = null;
                      let statusName = '';

                      core.info(`Checking reviewersâ€¦`);
                      const requestedTeams = pr.requested_teams || [];
                      const requestedReviewers = pr.requested_reviewers || [];

                      const isTeamRequested = requestedTeams.some(t => t.slug === teamSlug);
                      let isMemberRequested = false;
                      
                      if (isTeamRequested) {
                          core.info(`'${teamSlug}' is requested as a reviewer`);
                      }
                      else {
                          // Get all team members in one call
                          if (requestedReviewers.length > 0) {
                              core.info(`'${teamSlug}' is not requested as a reviewer. Going to check if any reviewer is a member of the team. Requesting up to 100 team members.`);
                              const { data: teamMembers } = await github.rest.teams.listMembersInOrg({
                                  org: owner,
                                  team_slug: teamSlug,
                                  per_page: 100  // Team size is small, 100 is more than enough
                              });
                              
                              // Check if any reviewer is in the team members list
                              isMemberRequested = requestedReviewers.some(reviewer => 
                                  teamMembers.some(member => member.login === reviewer.login)
                              );
                          }
                          else {
                              core.info(`No reviewers found. Skipping.`);
                          }
                      }

                      if (isTeamRequested || isMemberRequested) {
                          const status = isDraft 
                              ? { id: process.env.IN_PROGRESS_OPTION_ID, name: 'In Progress' }
                              : { id: process.env.IN_REVIEW_OPTION_ID, name: 'In Review' };
                          
                          core.info(`${isDraft ? 'Draft ' : ''}PR #${prNumber} is ready and has a reviewer from team '${teamSlug}'. Setting status to '${status.name}'.`);
                          statusOptionId = status.id;
                          statusName = status.name;
                      } else {
                          core.info(`PR #${prNumber} is not relevant to team '${teamSlug}'. Skipping.`);
                      }
          

                      const shouldAdd = statusOptionId !== null;
                      core.setOutput('should_add', shouldAdd.toString());
                      core.setOutput('pr_node_id', nodeId);
                      core.setOutput('status_option_id', statusOptionId ?? '');
            - name: Update Project Board
              if: steps.check.outputs.should_add == 'true'
              uses: actions/github-script@v6
              env:
                  PROJECT_V2_ID: ${{ env.PROJECT_V2_ID }}
                  STATUS_FIELD_ID: ${{ env.STATUS_FIELD_ID }}
                  PR_NODE_ID: ${{ steps.check.outputs.pr_node_id }}
                  STATUS_OPTION_ID: ${{ steps.check.outputs.status_option_id }}
              with:
                  github-token: ${{ secrets.POSTHOG_PROJECT_BOT_TOKEN }}
                  script: |
                      const projectId = process.env.PROJECT_V2_ID;
                      const fieldId = process.env.STATUS_FIELD_ID;
                      const optionId = process.env.STATUS_OPTION_ID;
                      const contentId = process.env.PR_NODE_ID;

                      // Get project details
                      const projectQuery = `
                        query($projectId: ID!) {
                          node(id: $projectId) {
                            ... on ProjectV2 {
                              title
                              fields(first: 10) {
                                nodes {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                    name
                                    options {
                                      id
                                      name
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      `;

                      const projectResult = await github.graphql(projectQuery, { projectId });
                      const project = projectResult.node;
                      const statusField = project.fields.nodes.find(f => f.id === fieldId);
                      
                      if (!statusField) {
                          throw new Error(`Could not find status field with ID ${fieldId} in project '${project.title}'. Please check the STATUS_FIELD_ID environment variable.`);
                      }
                      
                      const statusOption = statusField.options.find(o => o.id === optionId);
                      
                      if (!statusOption) {
                          throw new Error(`Could not find status option with ID ${optionId} in field '${statusField.name}'. Please check the status option IDs in the environment variables.`);
                      }

                      core.info(`Checking if PR is already in project '${project.title}'â€¦`);

                      // First, get the PR details using the node ID
                      const prQuery = `
                        query($nodeId: ID!) {
                          node(id: $nodeId) {
                            ... on PullRequest {
                              id
                              number
                              title
                            }
                          }
                        }
                      `;
                      
                      const prResult = await github.graphql(prQuery, { nodeId: contentId });
                      const prData = prResult.node;
                      
                      if (!prData) {
                          throw new Error(`Could not find PR with node ID: ${contentId}`);
                      }

                      core.info(`Checking if PR #${prData.number} (${prData.title}) is already in project '${project.title}'...`);

                      // Unfortunately the GraphQL API doesn't allow filtering by content id as part of the query afaict.
                      const query = `
                        query($projectId: ID!) {
                          node(id: $projectId) {
                            ... on ProjectV2 {
                              items(first: 100) {
                                nodes {
                                  id
                                  content {
                                    ... on PullRequest {
                                      id
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      `;

                      const result = await github.graphql(query, { projectId });
                      const items = result.node.items.nodes;
                      const existingItemId = items.find(item => item.content?.id === contentId)?.id || null;

                      if (existingItemId) {
                          core.info(`PR #${prData.number} (${prData.title}) already exists in project '${project.title}'. Updating status to '${statusOption.name}'...`);
                      } else {
                          core.info(`Adding PR #${prData.number} (${prData.title}) to project '${project.title}'...`);
                          const addItemMutation = `
                            mutation($projectId: ID!, $contentId: ID!) {
                              addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                                item { 
                                  id
                                }
                              }
                            }
                          `;

                          const response = await github.graphql(addItemMutation, { projectId, contentId });
                          existingItemId = response.addProjectV2ItemById.item.id;
                          core.info(`Added PR #${prData.number} (${prData.title}) to project '${project.title}'.`);
                      }

                      const updateStatusMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId,
                            itemId: $itemId,
                            fieldId: $fieldId,
                            value: { singleSelectOptionId: $optionId }
                          }) {
                            projectV2Item { 
                              id
                            }
                          }
                        }
                      `;

                      try {
                          await github.graphql(updateStatusMutation, {
                              projectId,
                              itemId: existingItemId,
                              fieldId,
                              optionId
                          });
                          core.info(`Updated PR #${prData.number} (${prData.title}) status to '${statusOption.name}' in project '${project.title}'.`);
                      } catch (error) {
                          core.setFailed(`Failed to update PR #${prData.number} (${prData.title}) status: ${error.message}`);
                      }
